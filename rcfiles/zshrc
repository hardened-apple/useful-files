# Lines configured by zsh-newuser-install {{{
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory extendedglob notify histignoredups autocd
unsetopt beep nomatch
# End of lines configured by zsh-newuser-install }}}
# The following lines were added by compinstall {{{

zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _correct _prefix
zstyle ':completion:*' completions 1
zstyle ':completion:*' format '%d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' match-original both
zstyle ':completion:*' max-errors 2 numeric
zstyle ':completion:*' menu select=long-list select=7
zstyle ':completion:*' original false
zstyle ':completion:*' prompt '..%e'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle :compinstall filename '$HOME/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall }}}

# Bindings {{{
# map alt-/ to complete files
# only works in xterm if have metaSendsEscape in xresources
zle -C complete-files complete-word _generic
zstyle ':completion:complete-files:*' completer _files

# Both emacs and vi modes now have M-<backspace> for delete /entire/path/name
# and C-w for delete a single part of /a/file/name
ctrl-z-jobs () {
    zle -M "$(jobs)"
}
zle -N ctrl-z-jobs

# start-kbd-macro() {
#   local macro
#   while
#     read -k 1
#     [[ $REPLY != \) ]] || (( ##$macro[-1] != 24 )); do
#     macro+="$REPLY"
#   done
#   bindkey -s '^Xe' "$macro[1,-2]"
# }
# zle -N start-kbd-macro
# bindkey '^X)' start-kbd-macro

# 'viins' map
bindkey -v
# steal a few commands from emacs for insert mode
bindkey '\C-r' history-incremental-search-backward
bindkey '\C-s' history-incremental-search-forward
bindkey '\C-a' beginning-of-line
bindkey '\C-e' end-of-line
bindkey '\C-k' kill-line
bindkey '\C-n' down-line-or-history
bindkey '\C-p' up-line-or-history
bindkey '\C-w' backward-kill-word
bindkey '\e\C-?' vi-backward-kill-word
bindkey '\eq' push-line
bindkey '\eg' get-line
# Have up and down arrows match current line
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward
bindkey '\e/' complete-files
bindkey '\C-z' ctrl-z-jobs

# 'emacs' map
bindkey -e
# Have up and down arrows match current line
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward
bindkey '\e\C-?' vi-backward-kill-word
delete-forward-word () {
  zle vi-forward-word
  zle vi-backward-kill-word
}
zle -N delete-forward-word
bindkey '\ed' delete-forward-word
bindkey '\C-u' backward-kill-line
bindkey '\e/' complete-files
bindkey '\eM' vi-find-prev-char
bindkey '\em' vi-find-next-char
bindkey '\eW' kill-region
bindkey '\eb' vi-backward-word
bindkey '\ef' vi-forward-word
bindkey '\C-z' ctrl-z-jobs
# }}}

# Prompt set-up{{{
#
setopt promptsubst
autoload -U promptinit
promptinit


case $TERM in
    *xterm*)
        precmd() {
            vcs_info
            print -Pn "\e]0;Apples_Terminal\a"  # When up
            print -Pn "\e]1;Minimised_Terminal\a" # When minimised
        }
        # preexec () { print -Pn "\e]0;Apples_Terminal ($1)\a" }
        ;;
    screen|screen-256color)
        precmd () {
            vcs_info
            print -Pn "\e]83;title \"$1\"\a"
            print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~]\a"
        }
        # preexec () {
            # print -Pn "\e]83;title \"$1\"\a"
            # print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~] ($1)\a"
        # }
        ;;
esac


autoload -U colors zsh/terminfo && colors

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*' formats "%{${fg[blue]}%}[%{${fg[red]}%}%s%{${fg[blue]}%}][%{${fg[green]}%}%b%{${fg[blue]}%}]%{$reset_color%} %{${fg_no_bold[cyan]}%}%u%{$reset_color%}"
zstyle ':vcs_info:hg*' formats "%{${fg[blue]}%}[%{${fg[magenta]}%}%s%{${fg[blue]}%}][%{${fg[green]}%}%b%{${fg[blue]}%}]%{$reset_color%}%{${fg_no_bold[cyan]}%}%u%c%{$reset_color%}"

setprompt() {
  setopt prompt_subst

  # make some aliases for the colours: (could use normal escap.seq's too)
  for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$fg[${(L)color}]%}'
  done
  PR_NO_COLOR="%{$terminfo[sgr0]%}"

  # Check the UID
  if [[ $UID -ge 1000 ]]; then # normal user
    PR_USER_COL="${PR_CYAN}"
  elif [[ $UID -eq 0 ]]; then # root
    PR_USER_COL="${PR_RED}"
  fi

  PR_USER="${PR_USER_COL}%# ${PR_NO_COLOR}"
  PR_TIME="${PR_BLUE}[${PR_USER_COL}%D{%H:%M:%S}${PR_BLUE}]${PR_NO_COLOR}"

  # Check if we are on SSH or not
  if [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then
    PR_HOST="${PR_YELLOW}%M${PR_BLUE}:${PR_NO_COLOR}" #SSH
  fi


  # set the prompt
  WD="${PR_MAGENTA}%c${PR_NO_COLOR}"
  # PROMPT=$'${PR_HOST}${PR_TIME}${WD}${PR_USER}'
  PROMPT=$'${PR_HOST}${WD} ${PR_TIME} ${PR_USER}'
  PS2=$'%_>'
  RPROMPT=$'${vcs_info_msg_0_} ${PR_YELLOW}[%?,%!]${PR_NO_COLOR}'
}

setprompt
# }}}

# {{{ Syntax highlighting for man, cat etc

# {{{ Cat, sed, awk, tail, diff syntax highlighting
# Cat tail, sed, awk, and head
# Check that highlight is installed
type highlight > /dev/null 2>&1
if [[ $? -eq 0 ]]; then
  tail head cat() {
    syntax=""
    for file in $@; do
      if [ -f $file ]; then
        case $file in
          *.lisp) syntax="lisp";;
          *.el) syntax="lisp";;
          *.hs) syntax="haskell";;
          *.asd) syntax="lisp";;
          *.java) syntax="java";;
          *.php) syntax="php";;
          *.py) syntax="python";;
          *.diff) syntax="diff";;
          *.rej) syntax="diff";;
          *.awk) syntax="awk";;
          *.c) syntax="c";;
          *.cpp) syntax="cpp";;
          *.ino) syntax="cpp";;
          *.pde) syntax="cpp";;
          *.css) syntax="css";;
          *.js) syntax="js";;
          *.jsp) syntax="jsp";;
          *.xml) syntax="xml";;
          *.sql) syntax="sql";;
          *.pl) syntax="pl";;
          *.rb) syntax="rb";;
          *.html) syntax="html";;
          *.sh) syntax="sh";;
          /etc/apache*/*) syntax="httpd";;
        esac
      fi
    done

    if [[ $syntax != "" ]]; then
      command $0 $@ | highlight -O ansi --syntax=$syntax
    else
      command $0 $@
    fi
  }
fi

# diff (always want the same highlighting)
colordiff() {
  type highlight > /dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    command diff $@ | highlight -O ansi --syntax=diff
  else
    command diff $@
  fi
}
# }}}

# {{{ Man page

vimman () {
  vim -c "runtime ftplugin/man.vim" -c "Man $*" -c 'wincmd o'
}

# }}}
# }}}

# Remove C-s and C-q {{{
# Can have problems in Rtorrent with these commands, run this if needs be
stty -ixon
stty -ixoff
# }}}

# Alias's  {{{
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$( dircolors -b ~/.dircolors )" || eval "$( dircolors -b )"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi
alias ll='ls -F'
alias gr='cd $(git root)'
alias hr='cd $(hg root)'

GIT_COMMANDS=(add am annotate apply archimport archive bisect blame branch bundle cat-file check-attr check-ignore check-mailmap check-ref-format checkout checkout-index cherry cherry-pick citool clean clone column commit commit-tree config count-objects credential credential-cache credential-cache--daemon credential-store cvsexportcommit cvsimport cvsserver daemon describe diff diff-files diff-index diff-tree difftool ex fast-export fast-import fetch fetch-pack filter-branch fmt-merge-msg for-each-ref format-patch fsck fsck-objects gc get-tar-commit-id graph grep gui hash-object help http-backend http-fetch http-push imap-send index-pack init init-db instaweb log ls-files ls-remote ls-tree mailinfo mailsplit merge merge-base merge-file merge-index merge-one-file merge-tree mergetool mergetool--lib mktag mktree mv name-rev notes p4 pack-objects pack-redundant pack-refs parse-remote patch-id prune prune-packed pull push quiltimport read-tree rebase receive-pack reflog relink remote remote-ext remote-fd remote-testgit repack replace request-pull rerere reset rev-list rev-parse revert root rm send-email send-pack sh-i18n sh-i18n--envsubst sh-setup shell shortlog show show-branch show-index show-ref stage stash stat status stripspace submodule subtree svn symbolic-ref tag unpack-file unpack-objects update-index update-ref update-server-info upload-archive upload-pack var verify-commit verify-pack verify-tag web--browse whatchanged write-tree)
giti() {
    for command in "${GIT_COMMANDS[@]}"
    do
        alias $command="git $command"
    done
}


ungiti() {
    for command in "${GIT_COMMANDS[@]}"
    do
        unalias $command
    done
}

# }}}

# General {{{
setopt interactivecomments
ulimit -c unlimited
# }}}

# {{{ Functions
newdir () {
  mkdir -p "$@"
  cd "$1"
}

swap () {
  tmpfile=$(mktemp -u XXXXXX)
  mv "$1" "$tmpfile"
  mv "$2" "$1"
  mv "$tmpfile" "$2"
}
# }}}

# Passwords {{{

PASSDIR=~/.config/passwords

pw() {
  cd "$PASSDIR"
    if [[ ! -z "$1" ]]; then
      vim "$1"*
    fi
  cd "$OLDPWD"
}
# }}}

# If Dumb {{{
if [[ "$TERM" == "dumb" ]]
then
       unsetopt zle
       unsetopt prompt_cr
       unsetopt prompt_subst
       unfunction precmd
       unfunction preexec
       PS1='$ '
fi

# vim: set ts=2 sw=2 foldmethod=marker:
