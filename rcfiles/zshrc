# Lines configured by zsh-newuser-install {{{
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory extendedglob notify
unsetopt autocd beep nomatch
bindkey -v
# End of lines configured by zsh-newuser-install }}}
# The following lines were added by compinstall {{{

zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _correct _prefix
zstyle ':completion:*' completions 1
zstyle ':completion:*' format '%d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' match-original both
zstyle ':completion:*' max-errors 2 numeric
zstyle ':completion:*' menu select=long-list select=7
zstyle ':completion:*' original false
zstyle ':completion:*' prompt '..%e'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/home/apple/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall }}}

# Prompt set-up{{{
#
setopt promptsubst
autoload -U promptinit
promptinit


case $TERM in
    *xterm*)
        precmd() {
            vcs_info
            print -Pn "\e]0;Apples_Terminal\a"  # When up
            print -Pn "\e]1;Minimised_Terminal\a" # When minimised
        }
        # preexec () { print -Pn "\e]0;Apples_Terminal ($1)\a" }
        ;;
    screen|screen-256color)
        precmd () {
            vcs_info
            print -Pn "\e]83;title \"$1\"\a"
            print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~]\a"
        }
        # preexec () {
            # print -Pn "\e]83;title \"$1\"\a"
            # print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~] ($1)\a"
        # }
        ;;
esac


autoload -U colors zsh/terminfo && colors

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*' formats "%{${fg[blue]}%}[%{${fg[red]}%}%s%{${fg[blue]}%}][%{${fg[green]}%}%b%{${fg[blue]}%}]%{$reset_color%} %{${fg_no_bold[cyan]}%}%u%{$reset_color%}"
zstyle ':vcs_info:hg*' formats "%{${fg[blue]}%}[%{${fg[magenta]}%}%s%{${fg[blue]}%}][%{${fg[green]}%}%b%{${fg[blue]}%}]%{$reset_color%}%{${fg_no_bold[cyan]}%}%u%c%{$reset_color%}"

setprompt() {
  setopt prompt_subst

  # make some aliases for the colours: (could use normal escap.seq's too)
  for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$fg[${(L)color}]%}'
  done
  PR_NO_COLOR="%{$terminfo[sgr0]%}"

  # Check the UID
  if [[ $UID -ge 1000 ]]; then # normal user
    PR_USER="${PR_CYAN}$ ${PR_NO_COLOR}"
  elif [[ $UID -eq 0 ]]; then # root
    PR_USER="${PR_RED}TODO # ${PR_NO_COLOR}"
  fi

  # Check if we are on SSH or not
  if [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then
    PR_HOST="${PR_YELLOW}%M:${PR_NO_COLOR}" #SSH
  fi
  # set the prompt
  WD="${PR_MAGENTA}%c ${PR_NO_COLOR}"
  PROMPT=$'${PR_HOST}${WD}${PR_USER}'
  # PROMPT=$'${PR_HOST}${PR_USER}'
  PS2=$'%_>'
  RPROMPT=$'${vcs_info_msg_0_} ${PR_YELLOW}[%?]${PR_NO_COLOR}'
}

setprompt
# }}}

# {{{ Syntax highlighting for man, cat etc

# {{{ Cat, sed, awk, grep, tail, diff syntax highlighting
# Cat tail, sed, awk, and grep, head
tail head cat sed awk grep() {
  syntax=""
  # check that highlight is installed
  type highlight > /dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    for file in $@; do
      if [ -f $file ]; then
        case $file in
          *.java) syntax="java";;
          *.php) syntax="php";;
          *.py) syntax="python";;
          *.diff) syntax="diff";;
          *.rej) syntax="diff";;
          *.awk) syntax="awk";;
          *.c) syntax="c";;
          *.css) syntax="css";;
          *.js) syntax="js";;
          *.jsp) syntax="jsp";;
          *.xml) syntax="xml";;
          *.sql) syntax="sql";;
          *.pl) syntax="pl";;
          *.rb) syntax="rb";;
          *.html) syntax="html";;
          *.sh) syntax="sh";;
          /etc/apache*/*) syntax="httpd";;
        esac
      fi
    done
  fi
  if [[ $syntax != "" ]]; then
    command $0 $@ | highlight -O ansi --syntax=$syntax
  else
    command $0 $@
  fi
}

# diff (always want the same highlighting)
colordiff() {
  type highlight > /dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    command diff $@ | highlight -O ansi --syntax=diff
  else
    command diff $@
  fi
}
# }}}

# {{{ Man page colors
man() {
    env LESS_TERMCAP_mb=$(printf "\e[1;31m") \
	LESS_TERMCAP_md=$(printf "\e[1;31m") \
	LESS_TERMCAP_me=$(printf "\e[0m") \
	LESS_TERMCAP_se=$(printf "\e[0m") \
	LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
	LESS_TERMCAP_ue=$(printf "\e[0m") \
	LESS_TERMCAP_us=$(printf "\e[1;32m") \
	man "$@"
}
# }}}
# }}}

# Remove C-s and C-q {{{
# Can have problems in Rtorrent with these commands, run this if needs be
# stty stop undef
# stty start undef
# }}}

# ------------------------- {{{
# ALIAS's
# -------------------------
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$( dircolors -b ~/.dircolors )" || eval "$( dircolors -b )"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi
alias ll='ls -F'
alias mympd='mpd ~/.config/mpd/mpd.conf'
alias myncmpcpp='ncmpcpp -c ~/.config/ncmpcpp/config'
alias killmybar='pkill conky; pkill tilda; pkill tint2'
alias gr='cd $(git root)'
alias hr='cd $(hg root)'
alias colorterm='TERM=screen-256color'
# }}}

# vim: set ts=2 sw=2 foldmethod=marker:
